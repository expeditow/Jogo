using UnityEngine;
using System;
using System.Collections.Generic;

public class CicloDiaNoite : MonoBehaviour
{
    public Light directionalLight;
    public float diaDuracaoSegundos = 24.0f;
    public int atualHora;
    public float atualHoraDoDia = 8f / 24f; // Inicia Яs 8h da manhса

а а public List<SkyBoxTimeMapping> timeMappings; // Mapeamento de horas para skyboxes

    private float blendedValue = 0.0f;
    private int numeroDoDia = 1;
    private float ultimaHoraDoDia = -1f;

    public static event Action<int> OnNovoDia;
    private ClimaSystem climaSystem;
    private bool isReady = false;

    void Start()
    {
        if (directionalLight == null)
        {
            Light foundLight = UnityEngine.Object.FindFirstObjectByType<Light>();

            if (foundLight != null && foundLight.type == LightType.Directional)
            {
                directionalLight = foundLight;
            }
            else
            {
                Debug.LogError("[CicloDiaNoite] Luz direcional nсo encontrada ou nсo configurada!");
            }
        }

        climaSystem = UnityEngine.Object.FindFirstObjectByType<ClimaSystem>();

        if (climaSystem == null)
        {
            Debug.LogError("[CicloDiaNoite] ClimaSystem nсo encontrado! A lзgica de skybox de chuva pode nсo funcionar.");
        }

        atualHora = Mathf.FloorToInt(atualHoraDoDia * 24);
        ultimaHoraDoDia = atualHoraDoDia;

        Debug.Log($"[CicloDiaNoite] Iniciando no Dia {numeroDoDia} Яs {atualHora:00}h ({atualHoraDoDia * 24:0.0}h)");
        OnNovoDia?.Invoke(numeroDoDia);
        isReady = true;

        AtualizarSkybox(); // Define o skybox inicial
а а }

    void Update()
    {
        float horaAnteriorFloat = atualHoraDoDia;
        atualHoraDoDia += Time.deltaTime / diaDuracaoSegundos;

        if (atualHoraDoDia >= 1.0f)
        {
            atualHoraDoDia %= 1.0f;
            ultimaHoraDoDia = atualHoraDoDia - (1.0f / diaDuracaoSegundos);
            numeroDoDia++;
            Debug.Log($"[CicloDiaNoite] Novo dia: {numeroDoDia}");
            OnNovoDia?.Invoke(numeroDoDia);
        }

        int horaCalculadaAnterior = atualHora;
        atualHora = Mathf.FloorToInt(atualHoraDoDia * 24);

а а а а // Atualiza rotaусo da luz direcional
а а а а if (directionalLight != null)
        {
            directionalLight.transform.rotation = Quaternion.Euler(new Vector3((atualHoraDoDia * 360f) - 90f, 170f, 0f));
        }
        AtualizarSkybox();
    }

    private void AtualizarSkybox()
    {
        if (climaSystem == null) { return; } 
а а а а Material skyboxFinalParaAplicar = RenderSettings.skybox; 
а а а а bool skyboxDeveMudar = false;

        if (climaSystem.IsRaining())
        {
а а а а а а bool ehChuvaNoturna = (atualHora >= 20 || atualHora < 5);
            if (ehChuvaNoturna)
            {
а а а а а а }

            else 
а а а а а а {
                if (climaSystem.rainSkyBox != null)
                {
                    if (RenderSettings.skybox != climaSystem.rainSkyBox)
                    {
                        skyboxFinalParaAplicar = climaSystem.rainSkyBox;
                        skyboxDeveMudar = true;
                    }

а а а а а а а а а а if (skyboxDeveMudar)
                    {
                        RenderSettings.skybox = skyboxFinalParaAplicar;
                        blendedValue = 0f; // Reseta transiусo ao mudar para o skybox de chuva
а а а а а а а а а а }
                    return; 
а а а а а а а а }
            }
        }
а а а а // Se nсo estiver chovendo de dia (pode estar ensolarado, ou pode ser chuva noturna):
а а а а Material skyboxMapeadoParaHora = null;

        if (timeMappings != null)
        {
            foreach (SkyBoxTimeMapping mapping in timeMappings)
            {
                if (atualHora == mapping.hora)
                {
                    skyboxMapeadoParaHora = mapping.skyboxMaterial;
                    break;
                }
            }
        }
        
        if (skyboxMapeadoParaHora != null)
        {
            if (RenderSettings.skybox != skyboxMapeadoParaHora)
            {
                skyboxFinalParaAplicar = skyboxMapeadoParaHora;
                skyboxDeveMudar = true;
            }
        }

        else if (!climaSystem.IsRaining()) 
а а а а {
а а а а а а // Fallback para o sunnySkyBox (cжu limpo padrсo)
а а а а а а if (climaSystem.sunnySkyBox != null && RenderSettings.skybox != climaSystem.sunnySkyBox)
            {
                skyboxFinalParaAplicar = climaSystem.sunnySkyBox;
                skyboxDeveMudar = true;
            }
        }
а а а а // Se for chuva noturna e nсo houver mapeamento para a hora atual, o skybox nсo serр alterado
а а а а if (skyboxDeveMudar && skyboxFinalParaAplicar != null)
        {
            RenderSettings.skybox = skyboxFinalParaAplicar;
            blendedValue = 0f; // Reseta o fator de transiусo quando o material base do skybox muda.
а а а а }

а а а а if (RenderSettings.skybox != null && RenderSettings.skybox.shader != null && RenderSettings.skybox.shader.name == "Custom/SkyboxTransition")
        {
а а а а а а blendedValue += Time.deltaTime;
а а а а а а blendedValue = Mathf.Clamp01(blendedValue);
            RenderSettings.skybox.SetFloat("_TransitionFactor", blendedValue);
        }
а а }
а а // Mжtodo para RainManager checar se pode pegar o dia (opcional)

а а public bool IsReady()
    {
        return isReady;
    }

    public int NumeroDoDia // Propriedade para RainManager acessar o dia atual
а а {
        get { return numeroDoDia; }
    }
}
[System.Serializable]

public class SkyBoxTimeMapping
{
    public string faseDoDia;
    public float hora; 
    public Material skyboxMaterial;
}